- more examples

- root position always has nonzero explicit submatch index

- double explicit submatch group that maps to the same implicit submatch group: ((...)) is collapsed in mark() and enum ()

- This is what I had to do in GOR correcness proof anyway --- first get rid of epsilon-loops (aka "problematic" paths),
  then prove right distributivity of comparison over concatenation for the rest. In the presence of epsilon-loops
  right distributivity doesn't hold --- I can give an example when a < b, but ac > bc (but then neither ac, nor bc
  correspond to the minimal path, so wrong comparison results for a and b does not cause any trouble). (We shall
  say it in the paper and mention the example, I think.

- The definition of lastht() and first() mentions the case in which the argument begins with a letter.
  However, they seems to be applied only to frames (that do not contain letters). Are there cases in
  which they are applied to something other than frames?

- P.S. I am still a bit uncertain about the usefulness of the subdivision in frames of PEs. Its usefulness is
  obvious in the case of Okui's PAT because them have sequences of parentheses on the arcs, corresponding
  to frames (and have no closure to be done). But in our case we have GOR1 that compares fragments
  of PEs that are not frames, and still uses a notion of rho that is somehow different.
  So, my question is how will we make use of frames in our context?

- I was thinking how to demonstrate Theorem 1. This is an attempt to do it.
  Taken two distinct trees s and t, since the norms are defined over Pos(s) union Pos(t),
  then it is either s < t or t < s (i.e. the ordering is total). Suppose WLOG it is s < t. Then, there is a position p
  for which ||s||_p > ||t||_p and all preceding positions have equal norms. Clearly, it cannot also be t < s.

- here are some examples to show why we define the norm as we do in Definition 4, and the rho and
  subsetting as we do in Definitions 7-10.
     (a|ε)* string a
           s: T^1(T^2(a^0))
           t: T^1(T^2(a^0,ε^0))
           s < t  because the norm for position 1.2 is infinite since it is missing
           it shows subsetting: the first tree has one branch less
     (a|aa)* string aa
           s: T^1(T^2(T^3(a^0,a^0)))
           t: T^1(T^2(T^3(a^0),T^4(a^ 0)))
           s < t because the norm at position 1 is 2 > that of the other, which is 1
           it shows the first tree has the branch for the second a further away from the
           root than the second (bigger rho)
     a|a   string a
           s: T^1(a^0,Φ^0)
           t: T^1(Φ^0,a^0)
           s < t because the norm at position 1 is > of the other which is -1 (missing alternative)
           it shows subsetting: the second tree has one null branch where the first has a
           non-null one

- Lemma 5. I think that it could be useful to add a couple of lines to explain it, otherwise the reader would not
  understand its usefulness. Basically, it says that there isa RE e, a string w, and two trees for it, s and t,
  which are identical up to a position p. Then it sais, that in such a case there is another RE (r~) and another
  string (w~) and that the subtrees of t and s at position p belong to the trees of this new RE and string.

- again on Lemma 5: last line, I suggest to add: Then r~ can be defined as follows: if r'= r1|r2 ...

- The question is that Okui defined the ordering on trees that are a bit different from ours (and
  that were similar to our PTs rather than to IPTs). Perhaps we should tell how his trees correspond to ours?

- Lemma 1, last line. Before "If r' ..." I would suggest to add: "Then r~ can be defined as follows."

- Theorem 2: I think that is proof is just above it. Perhaps we should move it below.

- in Figure 3. closure() is missing

- >    Hmm... I think that would be hard, and also needless effort.
  I was trying to prevent a question from some reviewer. Well, we could tell that we deliver an unspecified one that provides the correct submatches.

- >    You mean, mentioning that the user can specify the set of the implicit
  >    submatch indices using a different mechanism than parentheses?
  Yes, this is what tagged automata are all about: letting the user specify the parts for which the submatch has to
  be delivered. What I mean is that our algorithm can do it, and this is more general than Posix subexpressions.
  Indeed, it can go from full-parsing to any user-defined submatch extraction.

- Definition 17: F is used both to denote the set of final states and the function defined in Figure 2.
  Perhaps it could be better to use two letters?

- Figure 2,
  - first graph: in it F(i,j,r) is defined for i != 0. However, an F with a first argument that is not zero is
    never used. Perhaps there is a need to give some explanation
  - graph for alternative: why the tags are defined only in the incoming arc of the second term, and the ougoing of the first?

- in Figure 3:
   - in match(), closure is called with a first argument that should
be the set containing the initial
     configuration, that in the call is a 4-tuple. However, closure
expects configurations as 2-ples.
   - in the first configuration there is a t_0 that is not defined
   - reach() is called with three arguments, while in its definition
it has two. I think that its signature
     should be reach(X,Delta,alpha).
     Configurations are 4-ples: (origin-state, target-state,
input-symbol, tag), correct? The origin-state
     is there for precedence(), and was the 'origin' in the pseudocode.

- in Figure 4, closure_goldberg_radzik should be closure, and it
should handle 4-ples configurations.
Figure 4:

  - relax. At the beginning all the values of result() are _|_, thus
relax() should take care of it.
    I suggest to replace the first two lines with:

         if relax = _|_ or precedence(x,result(q),B,D then

  - closure_goldberg_radzik, 2nd and 3rd lines: here result and status
are initialized for all the states.
    To prevent some reviewer to point out that "q" is not defined, I
suggest to enclose the two
     statements in a foreach q in Q
  - same, line 14: here scan() is called, which in turn calls relax(),
which accesses "status". Thus,
    "status" should be passed as argument to both

  - relax: its signature has B and D as last 5th and 6th arguments, but
they are never passed when called.
    They should be passed all along closure_goldberg_radzik  and scan.
 
    Comparing it with calc_rho_prec() in the pseudocode:
    - the first two "if" statements can be merged
    - the statement: h_1 = h_2 = height(...) can only be executed if k >
1 (otherwise it accesses a_0 ...)
    - the statement: "if  a_k > b_k then l = -1"  and the following, are
different from the ones in the
      pseudocode (if nonnegative (a[i]) return LT, etc.)
   Comparing it with update_rho in the pseudocode:
    - the pseudocode initializes h_1 and h_2 with the values read from
B, while here it does so when
      k > 1, which is never the case when q_1 != q_2


- the statement: "if  a_k > b_k then l = -1"  and the following, are
  different from the ones in the pseudocode (if nonnegative (a[i]) return LT, etc.)

