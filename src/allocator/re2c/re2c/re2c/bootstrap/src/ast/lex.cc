/* Generated by re2c 1.1.1 on Wed Oct 31 23:59:37 2018 */
#line 1 "../src/ast/lex.re"
#include "src/util/c99_stdint.h"
#include <stddef.h>
#include <string.h>
#include <algorithm>
#include <limits>
#include <string>

#include "src/conf/msg.h"
#include "src/code/output.h"
#include "src/re/encoding/enc.h"
#include "src/ast/input.h"
#include "src/ast/ast.h"
#include "src/ast/scanner.h"
#include "src/ast/parser.h" // needed by "y.tab.h"
#include "src/ast/unescape.h"
#include "src/util/range.h"
#include "src/util/s_to_n32_unsafe.h"
#include "src/util/string_utils.h"
#include "y.tab.h"

extern YYSTYPE yylval;

#define    YYCTYPE      unsigned char
#define    YYCURSOR     cur
#define    YYLIMIT      lim
#define    YYMARKER     mar
#define    YYCTXMARKER  ctx
#define    YYFILL(n)    { fill (n); }

namespace re2c
{

// source code is in ASCII: pointers have type 'char *'
// but re2c makes an implicit assumption that YYCTYPE is unsigned
// when it generates comparisons
#line 38 "../src/ast/lex.re"


#line 60 "../src/ast/lex.re"


Scanner::ParseMode Scanner::echo(OutputFile &out)
{
    if (eof && cur == eof) // Catch EOF
    {
        return Stop;
    }

    tok = cur;
echo:
    ptr = cur;


#line 57 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 17) YYFILL(17);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '\f') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '%') {
			if (yych <= '$') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
#line 137 "../src/ast/lex.re"
	{
        if (cur != eof) goto echo;
        out.wraw(tok, ptr);
        return Stop;
    }
#line 121 "src/ast/lex.cc"
yy4:
	++YYCURSOR;
yy5:
#line 155 "../src/ast/lex.re"
	{ goto echo; }
#line 127 "src/ast/lex.cc"
yy6:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy7:
#line 149 "../src/ast/lex.re"
	{
        cline++;
        pos = cur;
        goto echo;
    }
#line 142 "src/ast/lex.cc"
yy8:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy6;
	goto yy5;
yy9:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '{') goto yy16;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == '*') goto yy18;
	goto yy5;
yy11:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy11;
	}
	if (yych == '#') goto yy14;
yy13:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy7;
	} else {
		goto yy5;
	}
yy14:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy14;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy14;
		if (yych == 'l') goto yy19;
		goto yy13;
	}
yy16:
	++YYCURSOR;
#line 74 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Parse;
    }
#line 190 "src/ast/lex.cc"
yy18:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '!') goto yy20;
	goto yy13;
yy19:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy21;
	goto yy13;
yy20:
	yych = (YYCTYPE)*++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy22;
	case 'i':	goto yy23;
	case 'm':	goto yy24;
	case 'r':	goto yy25;
	case 's':	goto yy26;
	case 't':	goto yy27;
	case 'u':	goto yy28;
	default:	goto yy13;
	}
yy21:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy29;
	goto yy13;
yy22:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy30;
	goto yy13;
yy23:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy31;
	goto yy13;
yy24:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy32;
	if (yych == 't') goto yy33;
	goto yy13;
yy25:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy34;
	if (yych == 'u') goto yy35;
	goto yy13;
yy26:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy36;
	goto yy13;
yy27:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'y') goto yy37;
	goto yy13;
yy28:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy38;
	goto yy13;
yy29:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy39;
	goto yy13;
yy30:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy40;
	goto yy13;
yy31:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy41;
	goto yy13;
yy32:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'x') goto yy42;
	goto yy13;
yy33:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy43;
	goto yy13;
yy34:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy44;
	goto yy13;
yy35:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'l') goto yy45;
	goto yy13;
yy36:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy46;
	goto yy13;
yy37:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy47;
	goto yy13;
yy38:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy48;
	goto yy13;
yy39:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy50;
	if (yych <= '9') goto yy13;
	goto yy50;
yy40:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy51;
	goto yy13;
yy41:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'o') goto yy52;
	goto yy13;
yy42:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy53;
	if (yych == 'n') goto yy54;
	goto yy13;
yy43:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy55;
	goto yy13;
yy44:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy16;
	goto yy13;
yy45:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy56;
	goto yy13;
yy46:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'g') goto yy57;
	goto yy13;
yy47:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy58;
	goto yy13;
yy48:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy59;
	goto yy13;
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy50:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy49;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy49;
		if (yych <= '0') goto yy13;
		if (yych <= '9') {
			YYCTXMARKER = YYCURSOR;
			goto yy60;
		}
		goto yy13;
	}
yy51:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy62;
	goto yy13;
yy52:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy63;
	goto yy13;
yy53:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy64;
	goto yy13;
yy54:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy65;
	goto yy13;
yy55:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy66;
	goto yy13;
yy56:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy67;
	goto yy13;
yy57:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy68;
	goto yy13;
yy58:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 's') goto yy69;
	goto yy13;
yy59:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy70;
	goto yy13;
yy60:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy60;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy13;
		if (yych <= '\t') goto yy71;
		if (yych <= '\n') goto yy73;
		goto yy13;
	} else {
		if (yych <= '\r') goto yy75;
		if (yych == ' ') goto yy71;
		goto yy13;
	}
yy62:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy76;
	goto yy13;
yy63:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy77;
	goto yy13;
yy64:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy78;
	goto yy13;
yy65:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy79;
	goto yy13;
yy66:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy80;
	goto yy13;
yy67:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy81;
	goto yy13;
yy68:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy82;
	goto yy13;
yy69:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy83;
	goto yy13;
yy70:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy84;
	goto yy13;
yy71:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy71;
		goto yy13;
	} else {
		if (yych <= ' ') goto yy71;
		if (yych == '"') goto yy85;
		goto yy13;
	}
yy73:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 143 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr + 1);
        set_sourceline();
        goto echo;
    }
#line 454 "src/ast/lex.cc"
yy75:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	goto yy13;
yy76:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy87;
	goto yy13;
yy77:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy88;
	goto yy13;
yy78:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy89;
	goto yy13;
yy79:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy90;
	goto yy13;
yy80:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy91;
	goto yy13;
yy81:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy92;
	goto yy13;
yy82:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy93;
	goto yy13;
yy83:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy94;
	goto yy13;
yy84:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy95;
	goto yy13;
yy85:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy85;
	}
	if (yych <= '\n') goto yy13;
	if (yych <= '"') goto yy96;
	goto yy97;
yy87:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy98;
	goto yy13;
yy88:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy99;
	goto yy13;
yy89:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy100;
	goto yy13;
yy90:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy102;
	goto yy13;
yy91:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy103;
	goto yy13;
yy92:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy104;
	goto yy13;
yy93:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy105;
	goto yy13;
yy94:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy106;
	goto yy13;
yy95:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy107;
	goto yy13;
yy96:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy73;
	if (yych == '\r') goto yy75;
	goto yy13;
yy97:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy13;
	if (yych == '\n') goto yy13;
	goto yy85;
yy98:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy109;
	goto yy13;
yy99:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy110;
	goto yy13;
yy100:
	++YYCURSOR;
#line 95 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxfill();
        lex_end_of_comment(out);
        goto echo;
    }
#line 570 "src/ast/lex.cc"
yy102:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'h') goto yy111;
	goto yy13;
yy103:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy112;
	goto yy13;
yy104:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy113;
	goto yy13;
yy105:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy114;
	goto yy13;
yy106:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy115;
	goto yy13;
yy107:
	++YYCURSOR;
#line 84 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Reuse;
    }
#line 598 "src/ast/lex.cc"
yy109:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy116;
	goto yy13;
yy110:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy117;
	goto yy13;
yy111:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy118;
	goto yy13;
yy112:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy119;
	goto yy13;
yy113:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy121;
	goto yy13;
yy114:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy123;
	goto yy13;
yy115:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy125;
	goto yy13;
yy116:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy127;
	goto yy13;
yy117:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy128;
	goto yy13;
yy118:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy130;
	goto yy13;
yy119:
	++YYCURSOR;
#line 131 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, true);
        goto echo;
    }
#line 647 "src/ast/lex.cc"
yy121:
	++YYCURSOR;
#line 79 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        return Rules;
    }
#line 655 "src/ast/lex.cc"
yy123:
	++YYCURSOR;
#line 125 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_tags(out, false);
        goto echo;
    }
#line 664 "src/ast/lex.cc"
yy125:
	++YYCURSOR;
#line 116 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_line_info_output();
        out.wdelay_types();
        out.wdelay_line_info_input(cline, get_fname());
        lex_end_of_comment(out);
        goto echo;
    }
#line 676 "src/ast/lex.cc"
yy127:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy131;
	goto yy13;
yy128:
	++YYCURSOR;
#line 89 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        lex_end_of_comment(out);
        goto echo;
    }
#line 689 "src/ast/lex.cc"
yy130:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy132;
	goto yy13;
yy131:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy133;
	goto yy13;
yy132:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy135;
	goto yy13;
yy133:
	++YYCURSOR;
#line 109 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_state_goto(0);
        lex_end_of_comment(out);
        goto echo;
    }
#line 711 "src/ast/lex.cc"
yy135:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'c') goto yy13;
	++YYCURSOR;
#line 102 "../src/ast/lex.re"
	{
        out.wraw(tok, ptr);
        out.wdelay_yymaxnmatch();
        lex_end_of_comment(out);
        goto echo;
    }
#line 723 "src/ast/lex.cc"
}
#line 156 "../src/ast/lex.re"

}

void Scanner::lex_end_of_comment(OutputFile &out)
{
    uint32_t ignored = 0;
    for (;;) {
#line 733 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy140;
		if (yych == '\n') goto yy144;
		goto yy142;
	} else {
		if (yych <= '\r') goto yy146;
		if (yych == '*') goto yy147;
		goto yy142;
	}
yy140:
	++YYCURSOR;
#line 163 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "expected end of block"); }
#line 751 "src/ast/lex.cc"
yy142:
	++YYCURSOR;
yy143:
#line 165 "../src/ast/lex.re"
	{ continue; }
#line 757 "src/ast/lex.cc"
yy144:
	++YYCURSOR;
#line 166 "../src/ast/lex.re"
	{ ++ignored; continue; }
#line 762 "src/ast/lex.cc"
yy146:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy144;
	goto yy143;
yy147:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy143;
	++YYCURSOR;
#line 167 "../src/ast/lex.re"
	{
            if (ignored > 0) {
                cline += ignored;
                out.wdelay_line_info_input(cline, get_fname());
            }
            tok = pos = cur;
            return;
        }
#line 780 "src/ast/lex.cc"
}
#line 175 "../src/ast/lex.re"
}
}

void Scanner::lex_tags(OutputFile &out, bool mtags)
{
    std::string fmt, sep;
    for (;;) {
#line 790 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 9) YYFILL(9);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
	if (yych <= ')') {
		if (yych <= '\n') {
			if (yych >= '\t') goto yy157;
		} else {
			if (yych == '\r') goto yy159;
		}
	} else {
		if (yych <= 'f') {
			if (yych <= '*') goto yy160;
			if (yych >= 'f') goto yy161;
		} else {
			if (yych == 's') goto yy162;
		}
	}
	++YYCURSOR;
yy153:
#line 182 "../src/ast/lex.re"
	{ fatal_lc(get_cline(), get_column(), "unrecognized configuration"); }
#line 850 "src/ast/lex.cc"
yy154:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy154;
	}
#line 187 "../src/ast/lex.re"
	{ continue; }
#line 860 "src/ast/lex.cc"
yy157:
	++YYCURSOR;
#line 188 "../src/ast/lex.re"
	{ ++cline; continue; }
#line 865 "src/ast/lex.cc"
yy159:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy157;
	goto yy153;
yy160:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy163;
	goto yy153;
yy161:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'o') goto yy165;
	goto yy153;
yy162:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych == 'e') goto yy167;
	goto yy153;
yy163:
	++YYCURSOR;
#line 189 "../src/ast/lex.re"
	{
            out.wdelay_tags(new ConfTags(fmt, sep), mtags);
            tok = pos = cur;
            return;
        }
#line 890 "src/ast/lex.cc"
yy165:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy168;
yy166:
	YYCURSOR = YYMARKER;
	goto yy153;
yy167:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'p') goto yy169;
	goto yy166;
yy168:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'm') goto yy170;
	goto yy166;
yy169:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy171;
	goto yy166;
yy170:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy172;
	goto yy166;
yy171:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'r') goto yy173;
	goto yy166;
yy172:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 't') goto yy174;
	goto yy166;
yy173:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'a') goto yy176;
	goto yy166;
yy174:
	++YYCURSOR;
#line 184 "../src/ast/lex.re"
	{ fmt = lex_conf_string(); continue; }
#line 929 "src/ast/lex.cc"
yy176:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 't') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'o') goto yy166;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'r') goto yy166;
	++YYCURSOR;
#line 185 "../src/ast/lex.re"
	{ sep = lex_conf_string(); continue; }
#line 940 "src/ast/lex.cc"
}
#line 194 "../src/ast/lex.re"
}
}

int Scanner::scan(const conopt_t *globopts)
{
scan:
    tchar = cur - pos;
    tok = cur;

#line 952 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 144,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		144, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 128, 128, 128, 128, 128, 128, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128,   0, 128, 128, 160, 
		128, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 160, 160, 160, 160, 160, 
		160, 160, 160, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
	if (yych <= '.') {
		if (yych <= '#') {
			if (yych <= '\r') {
				if (yych <= 0x08) goto yy183;
				if (yych <= '\n') goto yy188;
				if (yych >= '\r') goto yy190;
			} else {
				if (yych <= 0x1F) goto yy183;
				if (yych <= '!') goto yy191;
				if (yych <= '"') goto yy193;
				goto yy195;
			}
		} else {
			if (yych <= '\'') {
				if (yych == '%') goto yy196;
				if (yych >= '\'') goto yy197;
			} else {
				if (yych <= '*') {
					if (yych <= ')') goto yy191;
					goto yy199;
				} else {
					if (yych <= ',') goto yy191;
					if (yych >= '.') goto yy200;
				}
			}
		}
	} else {
		if (yych <= '\\') {
			if (yych <= '?') {
				if (yych <= '/') goto yy202;
				if (yych <= '9') goto yy183;
				if (yych <= ':') goto yy203;
				goto yy191;
			} else {
				if (yych <= '@') goto yy195;
				if (yych <= 'Z') goto yy204;
				if (yych <= '[') goto yy206;
				goto yy191;
			}
		} else {
			if (yych <= 'q') {
				if (yych == '_') goto yy204;
				if (yych >= 'a') goto yy204;
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy208;
					goto yy204;
				} else {
					if (yych <= '{') goto yy209;
					if (yych <= '|') goto yy191;
				}
			}
		}
	}
yy183:
	++YYCURSOR;
yy184:
#line 326 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(), "unexpected character: '%c'", *tok);
        goto scan;
    }
#line 1057 "src/ast/lex.cc"
yy185:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy185;
	}
#line 307 "../src/ast/lex.re"
	{ goto scan; }
#line 1067 "src/ast/lex.cc"
yy188:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy211;
	} else {
		if (yych <= ' ') goto yy211;
		if (yych == '#') goto yy214;
	}
yy189:
#line 314 "../src/ast/lex.re"
	{
        pos = cur;
        cline++;
        if (lexer_state == LEX_FLEX_NAME) {
            lexer_state = LEX_NORMAL;
            return TOKEN_FID_END;
        }
        else {
            goto scan;
        }
    }
#line 1090 "src/ast/lex.cc"
yy190:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy188;
	goto yy184;
yy191:
	++YYCURSOR;
yy192:
#line 223 "../src/ast/lex.re"
	{ return *tok; }
#line 1100 "src/ast/lex.cc"
yy193:
	++YYCURSOR;
#line 213 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('"'); return TOKEN_REGEXP; }
#line 1105 "src/ast/lex.cc"
yy195:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '^') {
		if (yych <= '@') goto yy184;
		if (yych <= 'Z') goto yy216;
		goto yy184;
	} else {
		if (yych == '`') goto yy184;
		if (yych <= 'z') goto yy216;
		goto yy184;
	}
yy196:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '}') goto yy219;
	goto yy184;
yy197:
	++YYCURSOR;
#line 212 "../src/ast/lex.re"
	{ yylval.regexp = lex_str('\''); return TOKEN_REGEXP; }
#line 1125 "src/ast/lex.cc"
yy199:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '/') goto yy219;
	goto yy192;
yy200:
	++YYCURSOR;
#line 302 "../src/ast/lex.re"
	{
        yylval.regexp = ast_dot(cline, get_column());
        return TOKEN_REGEXP;
    }
#line 1137 "src/ast/lex.cc"
yy202:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy221;
	if (yych == '/') goto yy223;
	goto yy192;
yy203:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '=') goto yy225;
	goto yy184;
yy204:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy205:
	if (yybm[0+yych] & 32) {
		goto yy204;
	}
	if (yych <= ' ') {
		if (yych == '\t') {
			YYCTXMARKER = YYCURSOR;
			goto yy229;
		}
		if (yych <= 0x1F) goto yy227;
		YYCTXMARKER = YYCURSOR;
		goto yy229;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy227;
			YYCTXMARKER = YYCURSOR;
			goto yy231;
		} else {
			if (yych <= '<') goto yy227;
			if (yych <= '>') {
				YYCTXMARKER = YYCURSOR;
				goto yy231;
			}
			goto yy227;
		}
	}
yy206:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '^') goto yy233;
#line 214 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(false); return TOKEN_REGEXP; }
#line 1182 "src/ast/lex.cc"
yy208:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy235;
	goto yy205;
yy209:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych <= 'Z') {
		if (yych == ',') goto yy236;
		if (yych >= 'A') goto yy240;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy240;
		} else {
			if (yych <= '`') goto yy210;
			if (yych <= 'z') goto yy240;
		}
	}
yy210:
#line 203 "../src/ast/lex.re"
	{ lex_code_in_braces(); return TOKEN_CODE; }
#line 1207 "src/ast/lex.cc"
yy211:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy211;
	} else {
		if (yych <= ' ') goto yy211;
		if (yych == '#') goto yy214;
	}
yy213:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy189;
		} else {
			goto yy210;
		}
	} else {
		goto yy237;
	}
yy214:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy214;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy214;
		if (yych == 'l') goto yy242;
		goto yy213;
	}
yy216:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy218;
		if (yych <= '9') goto yy216;
		if (yych >= 'A') goto yy216;
	} else {
		if (yych <= '_') {
			if (yych >= '_') goto yy216;
		} else {
			if (yych <= '`') goto yy218;
			if (yych <= 'z') goto yy216;
		}
	}
yy218:
#line 217 "../src/ast/lex.re"
	{
        const std::string *name = new std::string(tok + 1, tok_len() - 1);
        yylval.regexp = ast_tag(cline, get_column(), name, tok[0] == '#');
        return TOKEN_REGEXP;
    }
#line 1264 "src/ast/lex.cc"
yy219:
	++YYCURSOR;
#line 210 "../src/ast/lex.re"
	{ tok = cur; return 0; }
#line 1269 "src/ast/lex.cc"
yy221:
	++YYCURSOR;
#line 208 "../src/ast/lex.re"
	{ lex_c_comment(); goto scan; }
#line 1274 "src/ast/lex.cc"
yy223:
	++YYCURSOR;
#line 207 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto scan; }
#line 1279 "src/ast/lex.cc"
yy225:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '>') goto yy243;
#line 204 "../src/ast/lex.re"
	{ lex_code_indented(); return TOKEN_CODE; }
#line 1285 "src/ast/lex.cc"
yy227:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 284 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            yylval.str = new std::string (tok, tok_len());
            return TOKEN_ID;
        }
        else {
            std::vector<ASTChar> *str = new std::vector<ASTChar>;
            for (char *s = tok; s < cur; ++s) {
                const uint32_t
                    chr = static_cast<uint8_t>(*s),
                    col = static_cast<uint32_t>(s - tok);
                str->push_back(ASTChar(chr, col));
            }
            yylval.regexp = ast_str(cline, get_column(), str, false);
            return TOKEN_REGEXP;
        }
    }
#line 1307 "src/ast/lex.cc"
yy229:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= ' ') {
		if (yych == '\t') goto yy229;
		if (yych <= 0x1F) goto yy245;
		goto yy229;
	} else {
		if (yych <= ',') {
			if (yych <= '+') goto yy245;
		} else {
			if (yych <= '<') goto yy245;
			if (yych >= '?') goto yy245;
		}
	}
yy231:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 279 "../src/ast/lex.re"
	{
        yylval.str = new std::string (tok, tok_len ());
        return TOKEN_ID;
    }
#line 1332 "src/ast/lex.cc"
yy233:
	++YYCURSOR;
#line 215 "../src/ast/lex.re"
	{ yylval.regexp = lex_cls(true);  return TOKEN_REGEXP; }
#line 1337 "src/ast/lex.cc"
yy235:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '2') goto yy247;
	goto yy205;
yy236:
	++YYCURSOR;
yy237:
#line 252 "../src/ast/lex.re"
	{
        fatal_lc(get_cline(), get_column(),
            "illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
    }
#line 1350 "src/ast/lex.cc"
yy238:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy238;
	}
	if (yych == ',') goto yy248;
	if (yych == '}') goto yy249;
	goto yy213;
yy240:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '^') {
		if (yych <= '9') {
			if (yych <= '/') goto yy213;
			goto yy240;
		} else {
			if (yych <= '@') goto yy213;
			if (yych <= 'Z') goto yy240;
			goto yy213;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy213;
			goto yy240;
		} else {
			if (yych == '}') goto yy251;
			goto yy213;
		}
	}
yy242:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'i') goto yy253;
	goto yy213;
yy243:
	++YYCURSOR;
	YYCURSOR -= 2;
#line 205 "../src/ast/lex.re"
	{ return *tok; }
#line 1392 "src/ast/lex.cc"
yy245:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 268 "../src/ast/lex.re"
	{
        yylval.str = new std::string (tok, tok_len ());
        if (globopts->FFlag) {
            lexer_state = LEX_FLEX_NAME;
            return TOKEN_FID;
        }
        else {
            return TOKEN_ID;
        }
    }
#line 1407 "src/ast/lex.cc"
yy247:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'c') goto yy254;
	goto yy205;
yy248:
	yyaccept = 2;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy237;
	if (yych <= '9') goto yy255;
	if (yych == '}') goto yy257;
	goto yy237;
yy249:
	++YYCURSOR;
#line 225 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition count overflow");
        }
        yylval.bounds.max = yylval.bounds.min;
        return TOKEN_CLOSESIZE;
    }
#line 1429 "src/ast/lex.cc"
yy251:
	++YYCURSOR;
#line 257 "../src/ast/lex.re"
	{
        if (!globopts->FFlag) {
            fatal_lc(get_cline(), get_column(),
                "curly braces for names only allowed with -F switch");
        }
        yylval.str = new std::string (tok + 1, tok_len () - 2); // -2 to omit braces
        return TOKEN_ID;
    }
#line 1441 "src/ast/lex.cc"
yy253:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'n') goto yy259;
	goto yy213;
yy254:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == ':') goto yy260;
	goto yy205;
yy255:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '/') goto yy213;
	if (yych <= '9') goto yy255;
	if (yych == '}') goto yy262;
	goto yy213;
yy257:
	++YYCURSOR;
#line 244 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok + 1, cur - 2, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        yylval.bounds.max = std::numeric_limits<uint32_t>::max();
        return TOKEN_CLOSESIZE;
    }
#line 1468 "src/ast/lex.cc"
yy259:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == 'e') goto yy264;
	goto yy213;
yy260:
	++YYCURSOR;
#line 266 "../src/ast/lex.re"
	{ return TOKEN_CONF; }
#line 1477 "src/ast/lex.cc"
yy262:
	++YYCURSOR;
#line 233 "../src/ast/lex.re"
	{
        const char * p = strchr (tok, ',');
        if (!s_to_u32_unsafe (tok + 1, p, yylval.bounds.min)) {
            fatal_lc(get_cline(), get_column(), "repetition lower bound overflow");
        }
        if (!s_to_u32_unsafe (p + 1, cur - 1, yylval.bounds.max)) {
            fatal_lc(get_cline(), get_column(), "repetition upper bound overflow");
        }
        return TOKEN_CLOSESIZE;
    }
#line 1491 "src/ast/lex.cc"
yy264:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy266;
	if (yych <= '9') goto yy213;
	goto yy266;
yy265:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy266:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy265;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy265;
		if (yych <= '0') goto yy213;
		if (yych >= ':') goto yy213;
		YYCTXMARKER = YYCURSOR;
	}
yy267:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy213;
		} else {
			if (yych <= '\n') goto yy271;
			if (yych <= '\f') goto yy213;
			goto yy273;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy213;
		} else {
			if (yych <= '/') goto yy213;
			if (yych <= '9') goto yy267;
			goto yy213;
		}
	}
yy269:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy269;
		goto yy213;
	} else {
		if (yych <= ' ') goto yy269;
		if (yych == '"') goto yy274;
		goto yy213;
	}
yy271:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 309 "../src/ast/lex.re"
	{
        set_sourceline ();
        return TOKEN_LINE_INFO;
    }
#line 1552 "src/ast/lex.cc"
yy273:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy271;
	goto yy213;
yy274:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy274;
	}
	if (yych <= '\n') goto yy213;
	if (yych >= '#') goto yy277;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy271;
	if (yych == '\r') goto yy273;
	goto yy213;
yy277:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy213;
	if (yych == '\n') goto yy213;
	goto yy274;
}
#line 330 "../src/ast/lex.re"

}

void Scanner::lex_code_indented()
{
    const uint32_t line = cline;
    tok = cur;
code:

#line 1588 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy280;
			if (yych == '\n') goto yy284;
			goto yy282;
		} else {
			if (yych <= '\r') goto yy286;
			if (yych == '"') goto yy287;
			goto yy282;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy287;
			if (yych == '/') goto yy289;
			goto yy282;
		} else {
			if (yych == '|') goto yy282;
			if (yych <= '}') goto yy290;
			goto yy282;
		}
	}
yy280:
	++YYCURSOR;
#line 347 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 1618 "src/ast/lex.cc"
yy282:
	++YYCURSOR;
yy283:
#line 352 "../src/ast/lex.re"
	{ goto code; }
#line 1624 "src/ast/lex.cc"
yy284:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy285;
		if (yych <= '\n') goto yy292;
	} else {
		if (yych <= '\r') goto yy292;
		if (yych == ' ') goto yy292;
	}
yy285:
#line 340 "../src/ast/lex.re"
	{
        while (isspace(tok[0])) ++tok;
        while (cur > tok && isspace(cur[-1])) --cur;
        yylval.code = new Code(get_fname (), line, tok, tok_len ());
        return;
    }
#line 1642 "src/ast/lex.cc"
yy286:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy284;
	goto yy283;
yy287:
	++YYCURSOR;
#line 351 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 1651 "src/ast/lex.cc"
yy289:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy294;
	if (yych == '/') goto yy296;
	goto yy283;
yy290:
	++YYCURSOR;
#line 348 "../src/ast/lex.re"
	{ fatal_l(get_cline(), "Curly braces are not allowed after ':='"); }
#line 1661 "src/ast/lex.cc"
yy292:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 339 "../src/ast/lex.re"
	{ goto code; }
#line 1667 "src/ast/lex.cc"
yy294:
	++YYCURSOR;
#line 349 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 1672 "src/ast/lex.cc"
yy296:
	++YYCURSOR;
#line 350 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 1677 "src/ast/lex.cc"
}
#line 353 "../src/ast/lex.re"

}

void Scanner::lex_code_in_braces()
{
    const uint32_t line = cline;
    uint32_t depth = 1;
code:

#line 1689 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\f') {
			if (yych <= 0x00) goto yy300;
			if (yych == '\n') goto yy304;
			goto yy302;
		} else {
			if (yych <= '\r') goto yy306;
			if (yych == '"') goto yy307;
			goto yy302;
		}
	} else {
		if (yych <= 'z') {
			if (yych <= '\'') goto yy307;
			if (yych == '/') goto yy309;
			goto yy302;
		} else {
			if (yych <= '{') goto yy310;
			if (yych == '}') goto yy312;
			goto yy302;
		}
	}
yy300:
	++YYCURSOR;
#line 373 "../src/ast/lex.re"
	{ fail_if_eof(); goto code; }
#line 1753 "src/ast/lex.cc"
yy302:
	++YYCURSOR;
yy303:
#line 377 "../src/ast/lex.re"
	{ goto code; }
#line 1759 "src/ast/lex.cc"
yy304:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy314;
	}
	if (yych == '#') goto yy317;
yy305:
#line 372 "../src/ast/lex.re"
	{ pos = cur; cline++; goto code; }
#line 1769 "src/ast/lex.cc"
yy306:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy304;
	goto yy303;
yy307:
	++YYCURSOR;
#line 376 "../src/ast/lex.re"
	{ lex_string(cur[-1]); goto code; }
#line 1778 "src/ast/lex.cc"
yy309:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '*') goto yy319;
	if (yych == '/') goto yy321;
	goto yy303;
yy310:
	++YYCURSOR;
#line 370 "../src/ast/lex.re"
	{ ++depth; goto code; }
#line 1788 "src/ast/lex.cc"
yy312:
	++YYCURSOR;
#line 362 "../src/ast/lex.re"
	{
        if (--depth == 0) {
            yylval.code = new Code(get_fname (), line, tok, tok_len ());
            return;
        }
        goto code;
    }
#line 1799 "src/ast/lex.cc"
yy314:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy314;
	}
	if (yych == '#') goto yy317;
yy316:
	YYCURSOR = YYMARKER;
	goto yy305;
yy317:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy317;
		goto yy316;
	} else {
		if (yych <= ' ') goto yy317;
		if (yych == 'l') goto yy323;
		goto yy316;
	}
yy319:
	++YYCURSOR;
#line 374 "../src/ast/lex.re"
	{ lex_c_comment(); goto code; }
#line 1827 "src/ast/lex.cc"
yy321:
	++YYCURSOR;
#line 375 "../src/ast/lex.re"
	{ lex_cpp_comment(); goto code; }
#line 1832 "src/ast/lex.cc"
yy323:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'i') goto yy316;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'n') goto yy316;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != 'e') goto yy316;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '0') goto yy328;
	if (yych <= '9') goto yy316;
	goto yy328;
yy327:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy328:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy327;
		goto yy316;
	} else {
		if (yych <= ' ') goto yy327;
		if (yych <= '0') goto yy316;
		if (yych >= ':') goto yy316;
		YYCTXMARKER = YYCURSOR;
	}
yy329:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy329;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy316;
		if (yych <= '\t') goto yy331;
		if (yych <= '\n') goto yy333;
		goto yy316;
	} else {
		if (yych <= '\r') goto yy335;
		if (yych != ' ') goto yy316;
	}
yy331:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy331;
		goto yy316;
	} else {
		if (yych <= ' ') goto yy331;
		if (yych == '"') goto yy336;
		goto yy316;
	}
yy333:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
#line 371 "../src/ast/lex.re"
	{ set_sourceline (); goto code; }
#line 1891 "src/ast/lex.cc"
yy335:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy333;
	goto yy316;
yy336:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy336;
	}
	if (yych <= '\n') goto yy316;
	if (yych >= '#') goto yy339;
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy333;
	if (yych == '\r') goto yy335;
	goto yy316;
yy339:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy316;
	if (yych == '\n') goto yy316;
	goto yy336;
}
#line 378 "../src/ast/lex.re"

}

void Scanner::lex_string(char delim)
{
loop:

#line 1925 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '!') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy342;
			if (yych <= '\t') goto yy344;
			goto yy346;
		} else {
			if (yych == '\r') goto yy348;
			goto yy344;
		}
	} else {
		if (yych <= '\'') {
			if (yych <= '"') goto yy349;
			if (yych <= '&') goto yy344;
			goto yy349;
		} else {
			if (yych == '\\') goto yy351;
			goto yy344;
		}
	}
yy342:
	++YYCURSOR;
#line 388 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 1953 "src/ast/lex.cc"
yy344:
	++YYCURSOR;
yy345:
#line 389 "../src/ast/lex.re"
	{ goto loop; }
#line 1959 "src/ast/lex.cc"
yy346:
	++YYCURSOR;
#line 387 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 1964 "src/ast/lex.cc"
yy348:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy346;
	goto yy345;
yy349:
	++YYCURSOR;
#line 385 "../src/ast/lex.re"
	{ if (cur[-1] == delim) return; else goto loop; }
#line 1973 "src/ast/lex.cc"
yy351:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '&') {
		if (yych != '"') goto yy345;
	} else {
		if (yych <= '\'') goto yy352;
		if (yych != '\\') goto yy345;
	}
yy352:
	++YYCURSOR;
#line 386 "../src/ast/lex.re"
	{ goto loop; }
#line 1986 "src/ast/lex.cc"
}
#line 390 "../src/ast/lex.re"

}

void Scanner::lex_c_comment()
{
loop:

#line 1996 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy356;
		if (yych == '\n') goto yy360;
		goto yy358;
	} else {
		if (yych <= '\r') goto yy362;
		if (yych == '*') goto yy363;
		goto yy358;
	}
yy356:
	++YYCURSOR;
#line 399 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2014 "src/ast/lex.cc"
yy358:
	++YYCURSOR;
yy359:
#line 400 "../src/ast/lex.re"
	{ goto loop; }
#line 2020 "src/ast/lex.cc"
yy360:
	++YYCURSOR;
#line 398 "../src/ast/lex.re"
	{ pos = cur; ++cline; goto loop; }
#line 2025 "src/ast/lex.cc"
yy362:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy360;
	goto yy359;
yy363:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != '/') goto yy359;
	++YYCURSOR;
#line 397 "../src/ast/lex.re"
	{ return; }
#line 2036 "src/ast/lex.cc"
}
#line 401 "../src/ast/lex.re"

}

void Scanner::lex_cpp_comment()
{
loop:

#line 2046 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\n') {
		if (yych <= 0x00) goto yy368;
		if (yych <= '\t') goto yy370;
		goto yy372;
	} else {
		if (yych == '\r') goto yy374;
		goto yy370;
	}
yy368:
	++YYCURSOR;
#line 409 "../src/ast/lex.re"
	{ fail_if_eof(); goto loop; }
#line 2063 "src/ast/lex.cc"
yy370:
	++YYCURSOR;
yy371:
#line 410 "../src/ast/lex.re"
	{ goto loop; }
#line 2069 "src/ast/lex.cc"
yy372:
	++YYCURSOR;
#line 408 "../src/ast/lex.re"
	{ pos = cur; ++cline; return; }
#line 2074 "src/ast/lex.cc"
yy374:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy372;
	goto yy371;
}
#line 411 "../src/ast/lex.re"

}

const AST *Scanner::lex_cls(bool neg)
{
    std::vector<ASTRange> *cls = new std::vector<ASTRange>;
    uint32_t u, l, c, c0 = get_column();
fst:
    tok = cur;
    c = get_column();
    
#line 2092 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych == ']') goto yy378;
#line 423 "../src/ast/lex.re"
	{ l = lex_cls_chr(); goto snd; }
#line 2100 "src/ast/lex.cc"
yy378:
	++YYCURSOR;
#line 422 "../src/ast/lex.re"
	{ return ast_cls(cline, c0, cls, neg); }
#line 2105 "src/ast/lex.cc"
}
#line 424 "../src/ast/lex.re"

snd:
    
#line 2111 "src/ast/lex.cc"
{
	YYCTYPE yych;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*(YYMARKER = YYCURSOR);
	if (yych == '-') goto yy383;
yy382:
#line 427 "../src/ast/lex.re"
	{ u = l; goto add; }
#line 2120 "src/ast/lex.cc"
yy383:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych != ']') goto yy385;
	YYCURSOR = YYMARKER;
	goto yy382;
yy385:
	++YYCURSOR;
	YYCURSOR -= 1;
#line 428 "../src/ast/lex.re"
	{
            u = lex_cls_chr();
            if (l > u) {
                warn.swapped_range(cline, l, u);
                std::swap(l, u);
            }
            goto add;
        }
#line 2138 "src/ast/lex.cc"
}
#line 436 "../src/ast/lex.re"

add:
    cls->push_back(ASTRange(l, u, c));
    goto fst;
}

uint32_t Scanner::lex_cls_chr()
{
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2152 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy389;
		if (yych == '\n') goto yy393;
		goto yy391;
	} else {
		if (yych <= '\r') goto yy395;
		if (yych == '\\') goto yy396;
		goto yy391;
	}
yy389:
	++YYCURSOR;
#line 448 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2171 "src/ast/lex.cc"
yy391:
	++YYCURSOR;
yy392:
#line 454 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(tok[0]); }
#line 2177 "src/ast/lex.cc"
yy393:
	++YYCURSOR;
#line 449 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character class"); }
#line 2182 "src/ast/lex.cc"
yy395:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy393;
	goto yy392;
yy396:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '\\') {
		if (yych <= '/') {
			if (yych <= '\f') {
				if (yych <= 0x00) goto yy397;
				if (yych == '\n') goto yy393;
				goto yy398;
			} else {
				if (yych <= '\r') goto yy400;
				if (yych == '-') goto yy401;
				goto yy398;
			}
		} else {
			if (yych <= 'U') {
				if (yych <= '3') goto yy403;
				if (yych <= '7') goto yy405;
				if (yych <= 'T') goto yy398;
				goto yy406;
			} else {
				if (yych == 'X') goto yy408;
				if (yych <= '[') goto yy398;
				goto yy409;
			}
		}
	} else {
		if (yych <= 'n') {
			if (yych <= 'b') {
				if (yych <= ']') goto yy411;
				if (yych <= '`') goto yy398;
				if (yych <= 'a') goto yy413;
				goto yy415;
			} else {
				if (yych == 'f') goto yy417;
				if (yych <= 'm') goto yy398;
				goto yy419;
			}
		} else {
			if (yych <= 't') {
				if (yych == 'r') goto yy421;
				if (yych <= 's') goto yy398;
				goto yy423;
			} else {
				if (yych <= 'v') {
					if (yych <= 'u') goto yy408;
					goto yy425;
				} else {
					if (yych == 'x') goto yy427;
					goto yy398;
				}
			}
		}
	}
yy397:
#line 452 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2243 "src/ast/lex.cc"
yy398:
	++YYCURSOR;
yy399:
#line 467 "../src/ast/lex.re"
	{
            warn.useless_escape(cline, get_column(), tok[1]);
            return static_cast<uint8_t>(tok[1]);
        }
#line 2252 "src/ast/lex.cc"
yy400:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy393;
	goto yy399;
yy401:
	++YYCURSOR;
#line 465 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('-'); }
#line 2261 "src/ast/lex.cc"
yy403:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy404;
	if (yych <= '7') goto yy428;
yy404:
#line 451 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2270 "src/ast/lex.cc"
yy405:
	++YYCURSOR;
	goto yy404;
yy406:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy407;
		if (yych <= '9') goto yy430;
	} else {
		if (yych <= 'F') goto yy430;
		if (yych <= '`') goto yy407;
		if (yych <= 'f') goto yy430;
	}
yy407:
#line 450 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2288 "src/ast/lex.cc"
yy408:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy407;
		if (yych <= '9') goto yy431;
		goto yy407;
	} else {
		if (yych <= 'F') goto yy431;
		if (yych <= '`') goto yy407;
		if (yych <= 'f') goto yy431;
		goto yy407;
	}
yy409:
	++YYCURSOR;
#line 464 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2306 "src/ast/lex.cc"
yy411:
	++YYCURSOR;
#line 466 "../src/ast/lex.re"
	{ return static_cast<uint8_t>(']'); }
#line 2311 "src/ast/lex.cc"
yy413:
	++YYCURSOR;
#line 457 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2316 "src/ast/lex.cc"
yy415:
	++YYCURSOR;
#line 458 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2321 "src/ast/lex.cc"
yy417:
	++YYCURSOR;
#line 459 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2326 "src/ast/lex.cc"
yy419:
	++YYCURSOR;
#line 460 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2331 "src/ast/lex.cc"
yy421:
	++YYCURSOR;
#line 461 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2336 "src/ast/lex.cc"
yy423:
	++YYCURSOR;
#line 462 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2341 "src/ast/lex.cc"
yy425:
	++YYCURSOR;
#line 463 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2346 "src/ast/lex.cc"
yy427:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy407;
		if (yych <= '9') goto yy432;
		goto yy407;
	} else {
		if (yych <= 'F') goto yy432;
		if (yych <= '`') goto yy407;
		if (yych <= 'f') goto yy432;
		goto yy407;
	}
yy428:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy429;
	if (yych <= '7') goto yy433;
yy429:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy404;
	} else {
		goto yy407;
	}
yy430:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy435;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy435;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy435;
		goto yy429;
	}
yy431:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy436;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy436;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy436;
		goto yy429;
	}
yy432:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy437;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy437;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy437;
		goto yy429;
	}
yy433:
	++YYCURSOR;
#line 456 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2411 "src/ast/lex.cc"
yy435:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy439;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy439;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy439;
		goto yy429;
	}
yy436:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy432;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy432;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy432;
		goto yy429;
	}
yy437:
	++YYCURSOR;
#line 455 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2440 "src/ast/lex.cc"
yy439:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych >= ':') goto yy429;
	} else {
		if (yych <= 'F') goto yy440;
		if (yych <= '`') goto yy429;
		if (yych >= 'g') goto yy429;
	}
yy440:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy429;
		if (yych <= '9') goto yy431;
		goto yy429;
	} else {
		if (yych <= 'F') goto yy431;
		if (yych <= '`') goto yy429;
		if (yych <= 'f') goto yy431;
		goto yy429;
	}
}
#line 471 "../src/ast/lex.re"

}

uint32_t Scanner::lex_str_chr(char quote, bool &end)
{
    end = false;
    tok = cur;
    const uint32_t l = get_cline(), c = get_column();
    
#line 2474 "src/ast/lex.cc"
{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 10) YYFILL(10);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\f') {
		if (yych <= 0x00) goto yy443;
		if (yych == '\n') goto yy447;
		goto yy445;
	} else {
		if (yych <= '\r') goto yy449;
		if (yych == '\\') goto yy450;
		goto yy445;
	}
yy443:
	++YYCURSOR;
#line 481 "../src/ast/lex.re"
	{ fail_if_eof(); return 0; }
#line 2493 "src/ast/lex.cc"
yy445:
	++YYCURSOR;
yy446:
#line 487 "../src/ast/lex.re"
	{
            end = tok[0] == quote;
            return static_cast<uint8_t>(tok[0]);
        }
#line 2502 "src/ast/lex.cc"
yy447:
	++YYCURSOR;
#line 482 "../src/ast/lex.re"
	{ fatal_lc(l, c, "newline in character string"); }
#line 2507 "src/ast/lex.cc"
yy449:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	goto yy446;
yy450:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '`') {
		if (yych <= '3') {
			if (yych <= '\n') {
				if (yych <= 0x00) goto yy451;
				if (yych <= '\t') goto yy452;
				goto yy447;
			} else {
				if (yych == '\r') goto yy454;
				if (yych <= '/') goto yy452;
				goto yy455;
			}
		} else {
			if (yych <= 'W') {
				if (yych <= '7') goto yy457;
				if (yych == 'U') goto yy458;
				goto yy452;
			} else {
				if (yych <= 'X') goto yy460;
				if (yych == '\\') goto yy461;
				goto yy452;
			}
		}
	} else {
		if (yych <= 'q') {
			if (yych <= 'e') {
				if (yych <= 'a') goto yy463;
				if (yych <= 'b') goto yy465;
				goto yy452;
			} else {
				if (yych <= 'f') goto yy467;
				if (yych == 'n') goto yy469;
				goto yy452;
			}
		} else {
			if (yych <= 'u') {
				if (yych <= 'r') goto yy471;
				if (yych <= 's') goto yy452;
				if (yych <= 't') goto yy473;
				goto yy460;
			} else {
				if (yych <= 'v') goto yy475;
				if (yych == 'x') goto yy477;
				goto yy452;
			}
		}
	}
yy451:
#line 485 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in escape sequence"); }
#line 2563 "src/ast/lex.cc"
yy452:
	++YYCURSOR;
yy453:
#line 501 "../src/ast/lex.re"
	{
            if (tok[1] != quote) {
                warn.useless_escape(cline, get_column(), tok[1]);
            }
            return static_cast<uint8_t>(tok[1]);
        }
#line 2574 "src/ast/lex.cc"
yy454:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy447;
	goto yy453;
yy455:
	yyaccept = 0;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy456;
	if (yych <= '7') goto yy478;
yy456:
#line 484 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in octal escape sequence"); }
#line 2587 "src/ast/lex.cc"
yy457:
	++YYCURSOR;
	goto yy456;
yy458:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy480;
	} else {
		if (yych <= 'F') goto yy480;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy480;
	}
yy459:
#line 483 "../src/ast/lex.re"
	{ fatal_lc(l, c, "syntax error in hexadecimal escape sequence"); }
#line 2605 "src/ast/lex.cc"
yy460:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy481;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy481;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy481;
		goto yy459;
	}
yy461:
	++YYCURSOR;
#line 500 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\\'); }
#line 2623 "src/ast/lex.cc"
yy463:
	++YYCURSOR;
#line 493 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\a'); }
#line 2628 "src/ast/lex.cc"
yy465:
	++YYCURSOR;
#line 494 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\b'); }
#line 2633 "src/ast/lex.cc"
yy467:
	++YYCURSOR;
#line 495 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\f'); }
#line 2638 "src/ast/lex.cc"
yy469:
	++YYCURSOR;
#line 496 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\n'); }
#line 2643 "src/ast/lex.cc"
yy471:
	++YYCURSOR;
#line 497 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\r'); }
#line 2648 "src/ast/lex.cc"
yy473:
	++YYCURSOR;
#line 498 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\t'); }
#line 2653 "src/ast/lex.cc"
yy475:
	++YYCURSOR;
#line 499 "../src/ast/lex.re"
	{ return static_cast<uint8_t>('\v'); }
#line 2658 "src/ast/lex.cc"
yy477:
	yyaccept = 1;
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') goto yy459;
		if (yych <= '9') goto yy482;
		goto yy459;
	} else {
		if (yych <= 'F') goto yy482;
		if (yych <= '`') goto yy459;
		if (yych <= 'f') goto yy482;
		goto yy459;
	}
yy478:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '/') goto yy479;
	if (yych <= '7') goto yy483;
yy479:
	YYCURSOR = YYMARKER;
	if (yyaccept == 0) {
		goto yy456;
	} else {
		goto yy459;
	}
yy480:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy485;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy485;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy485;
		goto yy479;
	}
yy481:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy486;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy486;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy486;
		goto yy479;
	}
yy482:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy487;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy487;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy487;
		goto yy479;
	}
yy483:
	++YYCURSOR;
#line 492 "../src/ast/lex.re"
	{ return unesc_oct(tok, cur); }
#line 2723 "src/ast/lex.cc"
yy485:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy489;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy489;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy489;
		goto yy479;
	}
yy486:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy482;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy482;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy482;
		goto yy479;
	}
yy487:
	++YYCURSOR;
#line 491 "../src/ast/lex.re"
	{ return unesc_hex(tok, cur); }
#line 2752 "src/ast/lex.cc"
yy489:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych >= ':') goto yy479;
	} else {
		if (yych <= 'F') goto yy490;
		if (yych <= '`') goto yy479;
		if (yych >= 'g') goto yy479;
	}
yy490:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych <= '@') {
		if (yych <= '/') goto yy479;
		if (yych <= '9') goto yy481;
		goto yy479;
	} else {
		if (yych <= 'F') goto yy481;
		if (yych <= '`') goto yy479;
		if (yych <= 'f') goto yy481;
		goto yy479;
	}
}
#line 507 "../src/ast/lex.re"

}

const AST *Scanner::lex_str(char quote)
{
    const uint32_t column = get_column();
    std::vector<ASTChar> *str = new std::vector<ASTChar>;
    for (bool end;;) {
        const uint32_t c = lex_str_chr(quote, end);
        if (end) return ast_str(cline, column, str, quote == '\'');
        str->push_back(ASTChar(c, get_column()));
    }
}

void Scanner::set_sourceline ()
{
sourceline:
    tok = cur;

#line 2796 "src/ast/lex.cc"
{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy495;
		} else {
			if (yych <= '\n') goto yy497;
			if (yych <= '\f') goto yy495;
			goto yy499;
		}
	} else {
		if (yych <= '"') {
			if (yych <= '!') goto yy495;
			goto yy500;
		} else {
			if (yych <= '0') goto yy495;
			if (yych <= '9') goto yy501;
			goto yy495;
		}
	}
	++YYCURSOR;
#line 544 "../src/ast/lex.re"
	{
        --cur;
        tok = cur;
        return;
    }
#line 2860 "src/ast/lex.cc"
yy495:
	++YYCURSOR;
yy496:
#line 550 "../src/ast/lex.re"
	{ goto sourceline; }
#line 2866 "src/ast/lex.cc"
yy497:
	++YYCURSOR;
#line 539 "../src/ast/lex.re"
	{
        tok = cur;
        return;
    }
#line 2874 "src/ast/lex.cc"
yy499:
	yych = (YYCTYPE)*++YYCURSOR;
	if (yych == '\n') goto yy497;
	goto yy496;
yy500:
	yych = (YYCTYPE)*(YYMARKER = ++YYCURSOR);
	if (yych <= 0x00) goto yy496;
	if (yych == '\n') goto yy496;
	goto yy505;
yy501:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy501;
	}
#line 526 "../src/ast/lex.re"
	{
        if (!s_to_u32_unsafe (tok, cur, cline)) {
            fatal_lc(get_cline(), get_column(), "line number overflow");
        }
        goto sourceline;
    }
#line 2898 "src/ast/lex.cc"
yy504:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
yy505:
	if (yybm[0+yych] & 128) {
		goto yy504;
	}
	if (yych <= '\n') goto yy506;
	if (yych <= '"') goto yy507;
	goto yy509;
yy506:
	YYCURSOR = YYMARKER;
	goto yy496;
yy507:
	++YYCURSOR;
#line 533 "../src/ast/lex.re"
	{
        in.escaped_file_name = std::string (tok + 1, tok_len () - 2); // strip quotes
        strrreplace (in.escaped_file_name, "\\", "\\\\");
        goto sourceline;
    }
#line 2921 "src/ast/lex.cc"
yy509:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = (YYCTYPE)*YYCURSOR;
	if (yych <= 0x00) goto yy506;
	if (yych == '\n') goto yy506;
	goto yy504;
}
#line 551 "../src/ast/lex.re"

}

void Scanner::fail_if_eof() const
{
    if (cur == eof) {
        const uint32_t col = static_cast<uint32_t>(cur - pos) - 1;
        fatal_lc(get_cline(), col, "unexpected end of input");
    }
}

} // end namespace re2c
